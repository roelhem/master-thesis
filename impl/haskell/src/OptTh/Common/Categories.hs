module OptTh.Common.Categories where

import OptTh.Common.Constraints
import Prelude
import Data.Kind (Type, Constraint)

infixl 9 %
infixr 9 ∘

------------------------------------------------------------------------------------------
------------------------------------ COMPOSABLE ------------------------------------------
------------------------------------------------------------------------------------------

class Composable f g h | f g -> h where
  (%) :: f s t x y -> g x y a b -> h s t a b
  (%) = flip (∘)
  (∘) :: g x y a b -> f s t x y -> h s t a b
  (∘) = flip (%)
  {-# MINIMAL (%) | (∘)  #-}

------------------------------------------------------------------------------------------
-------------------------------- PROFUNCTOR CATEGORY -------------------------------------
------------------------------------------------------------------------------------------

class Composable o o o => ProCategory (o :: * -> * -> * -> * -> *) where
  id2 :: o a b a b

------------------------------------------------------------------------------------------
---------------------- FUNCTORS AND NATURAL TRANSFORMATIONS ------------------------------
------------------------------------------------------------------------------------------

newtype (:=>) f g = Nat { natTo :: forall x. f x -> g x }

------------------------------------------------------------------------------------------
-------------------------------- OPTICS CATEGORIES ---------------------------------------
------------------------------------------------------------------------------------------

class f ~> g where
  oTo :: f s t a b -> g s t a b

instance f ~> f where
  oTo = id